import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

typedef LocaleChangeCallback = void Function(Locale locale);

class I18n implements WidgetsLocalizations {
  const I18n();
  static Locale _locale;
  static bool _shouldReload = false;

  static set locale(Locale newLocale) {
    _shouldReload = true;
    I18n._locale = newLocale;
  }

  static const GeneratedLocalizationsDelegate delegate = GeneratedLocalizationsDelegate();

  /// function to be invoked when changing the language
  static LocaleChangeCallback onLocaleChanged;

  static I18n of(BuildContext context) =>
    Localizations.of<I18n>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  /// "Lucidum Legalis"
  String get appTitle => "Lucidum Legalis";
  /// "Lucidum\nLegalis"
  String get appTitleTwoLines => "Lucidum\nLegalis";
  /// "Login"
  String get loginLogin => "Login";
  /// "Username"
  String get loginUsername => "Username";
  /// "Password"
  String get loginPassword => "Password";
  /// "Password (opcional)"
  String get loginPasswordOptional => "Password (opcional)";
  /// "Confirm Password"
  String get loginPasswordConfirm => "Confirm Password";
  /// "New Account?"
  String get loginNewAccount => "New Account?";
  /// "Create Account"
  String get loginCreateAccount => "Create Account";
  /// "Confirm"
  String get loginConfirm => "Confirm";
  /// "Cancel"
  String get loginCancel => "Cancel";
  /// "Login automatically"
  String get loginAutoLogin => "Login automatically";
  /// "Welcome ${name}"
  String loginHelloUsername(String name) => "Welcome ${name}";
}

class _I18n_en_US extends I18n {
  const _I18n_en_US();

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_pt_PT extends I18n {
  const _I18n_pt_PT();

  /// "Entrar"
  @override
  String get loginLogin => "Entrar";
  /// "Nome de utilizador"
  @override
  String get loginUsername => "Nome de utilizador";
  /// "Palavra-passe"
  @override
  String get loginPassword => "Palavra-passe";
  /// "Palavra-passe (opcional)"
  @override
  String get loginPasswordOptional => "Palavra-passe (opcional)";
  /// "Confirmar Palavra-passe"
  @override
  String get loginPasswordConfirm => "Confirmar Palavra-passe";
  /// "Nova Conta?"
  @override
  String get loginNewAccount => "Nova Conta?";
  /// "Criar Conta"
  @override
  String get loginCreateAccount => "Criar Conta";
  /// "Confirmar"
  @override
  String get loginConfirm => "Confirmar";
  /// "Cancelar"
  @override
  String get loginCancel => "Cancelar";
  /// "Entrar automaticamente"
  @override
  String get loginAutoLogin => "Entrar automaticamente";
  /// "Olá ${name}"
  @override
  String loginHelloUsername(String name) => "Olá ${name}";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();
  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", "US"),
      Locale("pt", "PT")
    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      if (isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    I18n._locale ??= locale;
    I18n._shouldReload = false;
    final String lang = I18n._locale != null ? I18n._locale.toString() : "";
    final String languageCode = I18n._locale != null ? I18n._locale.languageCode : "";
    if ("en_US" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("pt_PT" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_pt_PT());
    }
    else if ("en" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("pt" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_pt_PT());
    }

    return SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length && locale != null; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => I18n._shouldReload;
}